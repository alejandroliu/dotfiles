#!/bin/bash
#
#
set -euf -o pipefail

scriptName=$(basename $(readlink -f $0))
scriptPath=$(dirname $(readlink -f $0))
((blockSize = 4 * 1024 * 1024)) # 4Mo

#################################################################
die() {
  local rc="$1" ; shift
  echo "$@" 1>&2
  exit "$rc"
}

printHelp() {
  cat 1>&2 <<-EOF
	$scriptName usage:
	Install a Windows ISO on an FAT partition and edit MBR of the device
	  $scriptName --install <iso path> <partition>
	 Example: $scriptName --install win7_amd64.iso /dev/sdd1

	Completely format a drive and install the ISO on it
	  $scriptName --format <iso path> <device>
	 Example: $scriptName --format win7_amd64.iso /dev/sdd

	Options
	 --help, -h           Show this help message and exit
	EOF
  exit
}

#################################################################

mkdosfsProg=''
if type 'mkdosfs' > /dev/null; then
  mkdosfsProg='mkdosfs'
elif type 'mkfs.msdos' > /dev/null; then
  mkdosfsProg='mkfs.msdos'
else
  die 48 'Error: mkdosfs or mkfs.msdos program not found!'
fi

cmd=""
for j in parted blockdev partprobe 7z blkid
do
  type $j >/dev/null 2>&1 || cmd="$cmd $j"
done
[ -n "$cmd" ] && die 13 "Missing commands:$cmd"

# Args
installMethod=''
isoPath=''
targetMedia=''
verbose=false


#################################################################

while [ ! "$#" -eq 0 ]; do
  case "$1" in
    '--help'|'-h')
      printHelp
      ;;
    '--install')
      installMethod='edit'
      shift
      isoPath=$(readlink -f "$1")
      shift
      targetMedia=$(readlink -f "$1");;
    '--format')
      installMethod='format'
      shift
      isoPath=$(readlink -f "$1")
      shift
      targetMedia=$(readlink -f "$1");;
    '--verbose'|'-v')
      verbose=true;;
    *)
      die 66  "Error: Unknown argument \"$1\"!"
      ;;
  esac

  shift
done

if [ -z "$installMethod" ]; then
  echo 'Error: No install method specified!' 1>&2
  printHelp
fi

if [ ! -f "$isoPath" ] && [ ! -b "$isoPath" ]; then
  die 93 "Error: iso '$isoPath' not found or not a regular file or a block file!"
fi

[ ! -b "$targetMedia" ] && die 96 "Error: the device "$targetMedia" is not special block!"

if [ $(id -u) -ne 0 ]; then
  exec sudo "$0" "$@"
  die 39 "Exec failed!"
fi

# Prepare install
if [ "$installMethod" = 'edit' ]; then
  device="$(echo "$targetMedia" | sed "s/[0-9]*$//")"
  partition="$targetMedia"
  echo "Target device is '$device'."
else  
  echo "Formatting device..."
  device="$targetMedia"  

  # Create new PC, a.k.a. MBR, a.k.a. msdos style partition table(and overwrite the old one, whatever it was)
  parted -s "$device" mklabel msdos

  # Create partiton
  # We start at 4MiB for grub (it needs a post-mbr gap for its code) and alignment of flash memery block erase segment in general, for details see http://www.gnu.org/software/grub/manual/grub.html#BIOS-installation and http://lwn.net/Articles/428584/
  parted -s "$device" mkpart primary fat32 4MiB -- -1s
  
  blockdev --rereadpt "$device" || true # Reload partition table
  partprobe "$device" # Reload partition table
  echo "Wait 3 seconds for block device nodes to populate..."
  sleep 3

  # get first partition
  partition=$(find /dev -maxdepth 1 -mindepth 1 -name "$(basename "$device")"'?*')

  # Create the FAT partition
  "$mkdosfsProg" -F 32 -n 'WINUSB' "$partition"
fi

# Umount partition
if [ "$(mount | grep -c "$partition")" != 0 ]; then
  umount "$partition"
fi

isoMountPath="$(mktemp -d)"
partitionMountPath="$(mktemp -d)"

trap "rm -rf $isoMountPath $partitionMountPath" EXIT

# Mounting
echo "Mounting..."

if [ -f "$isoPath" ]; then # ISO
  mount -o loop,ro -t udf,iso9660 "$isoPath" "$isoMountPath" || die 49 "Error mouting ISO image"
else # Real DVD drive (block)
  mount -o ro "$isoPath" "$isoMountPath" || die 51 "Error mounting DVD drive"
fi

trap "umount $isoPath && rm -rf $isoMountPath $partitionMountPath" EXIT

mount "$partition" "$partitionMountPath" || die 56 "Error mounting target partition"

trap "umount $isoPath && umount $partitionMountPath && rm -rf $isoMountPath $partitionMountPath" EXIT

freeSpace=$(df --block-size 1 "$partitionMountPath" | grep "$partition" | awk '{print $4}')
neededSpace=$(du -s "$isoMountPath" --bytes | awk '{print $1}')

((neededSpace = neededSpace + 1000 * 1000 * 10)) # 10MB more for grub installation

[ "$neededSpace" -gt "$freeSpace" ] && die 64 "Error: Not enough free space on '$partition'!"

echo "Copying files"
cp -r "$isoMountPath/." "$partitionMountPath" || die 67 "Error copying files!"

# Copy the EFI file for Windows 7
if ( grep -Eq "^MinServer=7[0-9]{3}\.[0-9]" "$isoMountPath/sources/cversion.ini") && [ -f "$isoMountPath/bootmgr.efi" ]; then
  # It's Windows 7 with EFI support (and thus 64-Bit)
  mkdir -p "$partitionMountPath/EFI/Boot"
  7z e -so "$isoMountPath/sources/install.wim" "1/Windows/Boot/EFI/bootmgfw.efi" \
    | dd of="$partitionMountPath/EFI/Boot/bootx64.efi"
fi

if type grub-install >/dev/null 2>&1 ; then
  # Grub
  echo "Installing grub..."
  grub-install --target=i386-pc --boot-directory="$partitionMountPath" "$device" 

  uuid=$(blkid -o value -s UUID "$partition") 

  # grub.cfg 
  echo "Installing grub.cfg..."
  cfgFilename="$partitionMountPath/grub/grub.cfg" 
  mkdir -p "$(dirname "$cfgFilename")"
  echo -n "" > "$cfgFilename"

  echo "echo '------------------------------------'" >> "$cfgFilename" 
  echo "echo '|      Windows USB - Loading...    |'" >> "$cfgFilename" 
  echo "echo '------------------------------------'" >> "$cfgFilename" 
  echo "insmod fat" >> "$cfgFilename"
  echo "search --no-floppy --fs-uuid $uuid --set root" >> "$cfgFilename" 
  echo "ntldr /bootmgr" >> "$cfgFilename"
  echo "boot" >> "$cfgFilename" 
elif type syslinux >/dev/null 2>&1 ; then
  # syslinux...
  echo "Installing syslinux to $partition"
  syslinux -i "$partition"
  echo "Installing MBR to $device..."
  mbr="mbr.bin"
  for syslinux_dir in /usr/share/syslinux /usr/share/syslinux/bios \
     /usr/lib/syslinux/bios :
  do
    [ -f "$syslinux_dir/$mbr" ] && break
  done
  [ ! -f "$syslinux_dir/$mbr" ] && die 7 "Unable to find MBR code"
  
  mbr=$syslinux_dir/mbr.bin
  chain=$syslinux_dir/chain.c32
  
  dd conv=notrunc bs=440 count=1 if=$mbr of="$device"
  parted "$device" set $(expr substr "$partition" $(expr $(expr length "$device") + 1) $(expr length "$partition")) boot on
  cfg="$partitionMountPath/syslinux.cfg"
  echo "Configuring $cfg"
  dd of=$cfg <<-EOF
    PROMPT 1
    TIMEOUT 30
    DEFAULT Windows
    LABEL Windows
      MENU LABEL Windows USB - Loading...
      COM32 chain.c32
      APPEND fs ntldr=/bootmgr
	EOF
  cp "$chain" "$partitionMountPath/"
else
  echo "No suitable boot loader found..."
  echo "USB device will *NOT* boot."
fi



